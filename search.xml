<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java 线程池</title>
    <url>/2021/05/31/ThreadPoolExecutor/</url>
    <content><![CDATA[<h3 id="Java线程池创建"><a href="#Java线程池创建" class="headerlink" title="Java线程池创建"></a>Java线程池创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>corePoolSize:核心线程最大数量，通俗点来讲就是，线程池中常驻线程的最大数量<br>maximumPoolSize:线程池中运行最大线程数(包括核心线程和非核心线程)<br>keepAliveTime:线程池中空闲线程（仅适用于非核心线程）所能存活的最长时间<br>unit:存活时间单位，与keepAliveTime搭配使用<br>workQueue：存放任务的阻塞队列<br>handler:线程池饱和策略</p>
<p>当提交一个新任务，线程池的处理流程如下：</p>
<p>判断线程池中核心线程数是否已达阈值corePoolSize,若否，则创建一个新核心线程执行任务<br>若核心线程数已达阈值corePoolSize,判断阻塞队列workQueue是否已满，若未满，则将新任务添加进阻塞队列<br>若满，再判断，线程池中线程数是否达到阈值maximumPoolSize,若否，则新建一个非核心线程执行任务。若达到阈值，则执行线程池饱和策略。</p>
<p>线程池饱和策略分为一下几种：<br>AbortPolicy:直接抛出一个异常，默认策略<br>DiscardPolicy: 直接丢弃任务<br>DiscardOldestPolicy:抛弃下一个将要被执行的任务(最旧任务)<br>CallerRunsPolicy:主线程中执行任务</p>
<h3 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h3><p>ArrayBlockingQueue:使用数组实现的有界阻塞队列，特性先进先出<br>LinkedBlockingQueue:使用链表实现的阻塞队列，特性先进先出，可以设置其容量，默认为Interger.MAX_VALUE，特性先进先出<br>PriorityBlockingQueue:使用平衡二叉树堆，实现的具有优先级的无界阻塞队列<br>DelayQueue:无界阻塞延迟队列，队列中每个元素均有过期时间，当从队列获取元素时，只有过期元素才会出队列。队列头元素是最块要过期的元素。<br>SynchronousQueue:一个不存储元素的阻塞队列，每个插入操作，必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                      threadFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</span><br><span class="line">                                threadFactory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>corePoolSize等于maximumPoolSize,所以线程池中只有核心线程，使用无界阻塞队列LinkedBlockingQueue作为工作队列</p>
<p>FixedThreadPool是一种线程数量固定的线程池，当线程处于空闲状态时，他们并不会被回收，除非线程池被关闭。当所有的线程都处于活动状态时，新的任务都会处于等待状态，直到有线程空闲出来</p>
<p>如果当前运行的线程数少于corePoolSize，创建新线程来执行任务。<br>在线程数目达到corePoolSize后，将新任务放到LinkedBlockingQueue阻塞队列中。<br>线程执行完(1)中任务后，会在循环中反复从LinkedBlockingQueue获取任务来执行。</p>
<p>使用场景：适用于处理CPU密集型的任务，确保CPU在长期被工作线程使用的情况下，尽可能的少的分配线程，即适用执行长期的任务。</p>
<h3 id="SingleThreadExecutor"><a href="#SingleThreadExecutor" class="headerlink" title="SingleThreadExecutor"></a>SingleThreadExecutor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>创建单个线程。<br>它适用于需要保证顺序地执行各个任务;<br>并且在任意时间点，不会有多个线程是活动的应用场景。<br>SingleThreadExecutor的corePoolSize和maximumPoolSize被设置为1，使用无界队列LinkedBlockingQueue作为线程池的工作队列。</p>
<p>当线程池中没有线程时，会创建一个新线程来执行任务。<br>当前线程池中有一个线程后，将新任务加入LinkedBlockingQueue<br>线程执行完第一个任务后，会在一个无限循环中反复从LinkedBlockingQueue 获取任务来执行</p>
<p>使用场景：适用于串行执行任务场景</p>
<h3 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>核心线程数为0，总线程数量阈值为Integer.MAX_VALUE,即可以创建无限的非核心线程</p>
<p>先执行SynchronousQueue的offer方法提交任务，并查询线程池中是否有空闲线程来执行SynchronousQueue的poll方法来移除任务。如果有，则配对成功，将任务交给这个空闲线程<br>否则，配对失败，创建新的线程去处理任务<br>当线程池中的线程空闲时，会执行SynchronousQueue的poll方法等待执行SynchronousQueue中新提交的任务。若等待超过60s,空闲线程就会终止</p>
<p>使用场景：执行大量短生命周期任务。因为maximumPoolSize是无界的，所以提交任务的速度 &gt; 线程池中线程处理任务的速度就要不断创建新线程；每次提交任务，都会立即有线程去处理，因此CachedThreadPool适用于处理大量、耗时少的任务。</p>
<h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">        <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>线程总数阈值为Integer.MAX_VALUE,工作队列使用DelayedWorkQueue，非核心线程存活时间为0，所以线程池仅仅包含固定数目的核心线程。</p>
<p>两种方式提交任务：</p>
<p>scheduleAtFixedRate: 按照固定速率周期执行<br>scheduleWithFixedDelay：上个任务延迟固定时间后执行</p>
<p>使用场景：周期性执行任务，并且需要限制线程数量的场景</p>
]]></content>
      <categories>
        <category>Java 线程池</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>command</title>
    <url>/2021/05/13/command/</url>
    <content><![CDATA[<h3 id="一、查看-ls"><a href="#一、查看-ls" class="headerlink" title="一、查看 ls"></a>一、查看 ls</h3><h4 id="ls命令选项"><a href="#ls命令选项" class="headerlink" title="ls命令选项"></a>ls命令选项</h4><pre><code>-a 列出目录下的所有文件，包含.开头的隐藏文件
-l 列出文件的详细信息
-i 查看文件的iNode号（iNode会指向文件块所在的位置）
-h 以容易读取的方式显示文件大小
-d 仅列出目录本身，而不显示目录中的文件
-t 按照时间顺序排序，时间越早越早下面
</code></pre>
<h3 id="二、创建目录-mkdir"><a href="#二、创建目录-mkdir" class="headerlink" title="二、创建目录 mkdir"></a>二、创建目录 mkdir</h3><h4 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h4><pre><code>-p 创建多级目录（跨级创建）
-v 查看目录创建的过程（创建目录可视化）
</code></pre>
<h3 id="三、删除文件-rmdir"><a href="#三、删除文件-rmdir" class="headerlink" title="三、删除文件 rmdir"></a>三、删除文件 rmdir</h3><h3 id="四、创建文件-touch"><a href="#四、创建文件-touch" class="headerlink" title="四、创建文件 touch"></a>四、创建文件 touch</h3><h3 id="五、删除文件或目录-rm"><a href="#五、删除文件或目录-rm" class="headerlink" title="五、删除文件或目录 rm"></a>五、删除文件或目录 rm</h3><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><pre><code>rm 文件名（删除时会询问是否删除）
rm -f 文件名（强制删除）
rm -v 文件名（可视化删除）
</code></pre>
<h4 id="删除目录"><a href="#删除目录" class="headerlink" title="删除目录"></a>删除目录</h4><pre><code>rm -r 目录名（删除时会询问是否删除）
rm -rf 目录名（强制删除，若目录不存在，此命令依旧可以执行，不报错）
rm -rv 目录名（可视化强制）
</code></pre>
<h3 id="六、复制文件或目录（可以对目标文件或目录重命名）-cp"><a href="#六、复制文件或目录（可以对目标文件或目录重命名）-cp" class="headerlink" title="六、复制文件或目录（可以对目标文件或目录重命名） cp"></a>六、复制文件或目录（可以对目标文件或目录重命名） cp</h3><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><pre><code>格式：cp 源文件 目标文件
</code></pre>
<h4 id="拷贝目录（目录需要加-）注意区分绝对路径和相对路径"><a href="#拷贝目录（目录需要加-）注意区分绝对路径和相对路径" class="headerlink" title="拷贝目录（目录需要加/）注意区分绝对路径和相对路径"></a>拷贝目录（目录需要加/）注意区分绝对路径和相对路径</h4><pre><code>格式：cp -r 源目录 目标目录
</code></pre>
<h4 id="命令CP自带安全参数-i，如果不想被询问，则可以使用命令-user-bin-cp"><a href="#命令CP自带安全参数-i，如果不想被询问，则可以使用命令-user-bin-cp" class="headerlink" title="命令CP自带安全参数-i，如果不想被询问，则可以使用命令/user/bin/cp"></a>命令CP自带安全参数-i，如果不想被询问，则可以使用命令/user/bin/cp</h4><h3 id="七、查看文件内容cat-tac-more-less-head-tail"><a href="#七、查看文件内容cat-tac-more-less-head-tail" class="headerlink" title="七、查看文件内容cat tac more less head tail"></a>七、查看文件内容cat tac more less head tail</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>linux命令</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>Arrays使用的坑</title>
    <url>/2021/09/07/Arrays%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/</url>
    <content><![CDATA[<h2 id="使用Arrays-asList把数据转换为List的三个坑"><a href="#使用Arrays-asList把数据转换为List的三个坑" class="headerlink" title="使用Arrays.asList把数据转换为List的三个坑"></a>使用Arrays.asList把数据转换为List的三个坑</h2><pre><code>**不能直接使用Arrays.asList来转换基本类型数组**
**Arrays.asList返回的List不支持增删操作**
**对原始数组的修改会影响到我们获得的那个List**
</code></pre>
<h2 id="使用List-subList进行切片操作居然会导致OOM"><a href="#使用List-subList进行切片操作居然会导致OOM" class="headerlink" title="使用List.subList进行切片操作居然会导致OOM"></a>使用List.subList进行切片操作居然会导致OOM</h2><pre><code>**subList方法返回的List强引用**
</code></pre>
<h2 id="合适的数据结构做合适的事情"><a href="#合适的数据结构做合适的事情" class="headerlink" title="合适的数据结构做合适的事情"></a>合适的数据结构做合适的事情</h2><pre><code>**数据结构不考虑平衡时间和空间**
**List进行单值搜索的话，可以考虑使用HashMap，其中Key是要搜索的值，Value是原始对象，会比使用ArrayList有非常明显的性能优势**
</code></pre>
]]></content>
      <categories>
        <category>Java Arrays</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Arrays</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis命令</title>
    <url>/2021/06/01/RedisLearn/</url>
    <content><![CDATA[<h3 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h3><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。<br>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。<br>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p>
<h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>列表最多可存储 232 - 1 元素 (4294967295, 每个列表可存储40多亿)。</p>
<h3 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h3><p>Redis hash 是一个键值(key=&gt;value)对集合。<br>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p>
<h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis 的 Set 是 string 类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。<br>sadd 命令<br>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p>
<h3 id="zset-sorted-set：有序集合"><a href="#zset-sorted-set：有序集合" class="headerlink" title="zset(sorted set：有序集合)"></a>zset(sorted set：有序集合)</h3><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。<br>zadd 命令<br>添加元素到集合，元素在集合中存在则更新对应score</p>
<p>1.flushall 清空数据库并执行持久化操作,也就是rdb文件会发生改变,变成76个字节大小(初始状态下为76字节),所以执行flushall之后数据库真正意义上清空了.<br>2.flushdb 清空数据库,但是不执行持久化操作,也就是说rdb文件不发生改变.而redis的数据是从rdb快照文件中读取加载到内存的,所以在flushdb之后,如果想恢复数据库,则可以直接kill掉redis-server进程,然后重新启动服务,这样redis重新读取rdb文件,数据恢复到flushdb操作之前的状态.<br>注意:要直接kill 掉redis-server服务,因为shutdown操作会触发持久化.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsof -i:6379 命令查看redis-server的进程号,然后kill即可</span><br></pre></td></tr></table></figure>

<p>lrange  查询key的值</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
</search>
